pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
    }

    stages {

        stage('Checkout Code') {
            steps {
                echo "Checking out Kafka cluster code..."
                git branch: 'main',
                    url: 'https://github.com/AnithaAnnem/my-kafka-task.git'
            }
        }

        stage('Test SSH Connectivity') {
            steps {
                echo "Testing SSH connectivity to all EC2 instances..."
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'AWS-creds'
                ]]) {
                    sh """
                        ansible all -i kafkacluster/aws_ec2.yml -u ubuntu -m ping -vvv
                    """
                }
            }
        }

        stage('Deploy Zookeeper Cluster') {
            steps {
                echo "Deploying Zookeeper Cluster..."
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'AWS-creds'
                ]]) {
                    sh """
                        ansible-playbook -i kafkacluster/aws_ec2.yml kafkacluster/site.yml --tags zookeeper
                    """
                }
            }
        }

        stage('Deploy Kafka Brokers') {
            steps {
                echo "Deploying Kafka Brokers..."
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'AWS-creds'
                ]]) {
                    sh """
                        ansible-playbook -i kafkacluster/aws_ec2.yml kafkacluster/site.yml --tags kafka
                    """
                }
            }
        }

        stage('Clean Workspace') {
            steps {
                echo "Cleaning workspace..."
                cleanWs()
            }
        }
    }

    post {
        success { echo "Deployment completed successfully!" }
        failure { echo "Deployment failed. Check logs for errors." }
        always { echo "Pipeline finished." }
    }
}
