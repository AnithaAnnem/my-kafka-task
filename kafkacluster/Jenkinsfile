pipeline {
    agent any

    environment {
        SSH_KEY = 'AWS-SSH-key'          // Your Jenkins SSH credential
        SSH_USER = 'ubuntu'              // Default user for your EC2 instances
        ANSIBLE_INVENTORY = 'aws_ec2.yml' // Your dynamic inventory file
        PLAYBOOK = 'site.yml'             // Main Ansible playbook
    }

    stages {

        stage('Checkout SCM') {
            steps {
                echo "Checking out Kafka cluster repository..."
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], 
                          userRemoteConfigs: [[url: 'https://github.com/AnithaAnnem/my-kafka-task.git']]])
            }
        }

        stage('Install Ansible Requirements') {
            steps {
                echo "Installing requirements if needed..."
                sh 'ansible --version || sudo apt-get update && sudo apt-get install -y ansible python3-pip'
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                echo "Running Ansible playbook to deploy Kafka cluster..."
                sh """
                    ansible-playbook -i ${ANSIBLE_INVENTORY} ${PLAYBOOK} -u ${SSH_USER} --private-key ${SSH_KEY}
                """
            }
        }

        stage('Verify Services') {
            steps {
                echo "Checking Kafka and Zookeeper services on all nodes..."
                sh """
                    ansible all -i ${ANSIBLE_INVENTORY} -u ${SSH_USER} --private-key ${SSH_KEY} -m shell -a 'sudo systemctl status zookeeper kafka --no-pager'
                """
                echo "Listing running Kafka/Zookeeper processes..."
                sh """
                    ansible all -i ${ANSIBLE_INVENTORY} -u ${SSH_USER} --private-key ${SSH_KEY} -m shell -a "ps -ef | grep -E 'kafka|zookeeper' | grep -v grep"
                """
            }
        }
    }

    post {
        success {
            echo "Kafka cluster deployed successfully!"
        }
        failure {
            echo "Deployment failed. Please check the logs."
        }
        always {
            echo "Cleaning workspace..."
            cleanWs()
        }
    }
}
